# source: http://localhost:3060/graphql/v2
# timestamp: Tue Mar 17 2020 16:30:00 GMT+0100 (GMT+01:00)

"""
Account interface shared by all kind of accounts (Bot, Collective, Event, User, Organization)
"""
interface Account {
  """
  The public id identifying the account (ie: 5v08jk63-w4g9nbpz-j7qmyder-p7ozax5g)
  """
  id: String

  """
  The internal database identifier of the collective (ie: 580)
  """
  legacyId: Int @deprecated(reason: "2020-01-01: should only be used during the transition to GraphQL API v2.")

  """
  The slug identifying the account (ie: babel)
  """
  slug: String

  """
  The type of the account (BOT/COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
  """
  type: AccountType
  name: String
  description: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String
  imageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime

  """
  The time of last update
  """
  updatedAt: DateTime
  members(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]

    """
    Type of accounts (BOT/COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: [AccountType]
  ): MemberCollection
  memberOf(
    limit: Int = 100
    offset: Int = 0
    role: [MemberRole]

    """
    Type of accounts (BOT/COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: [AccountType]
  ): MemberOfCollection
  transactions(
    limit: Int = 100
    offset: Int = 0

    """
    Type of transaction (DEBIT/CREDIT)
    """
    type: TransactionType
    orderBy: ChronologicalOrderInput
  ): TransactionCollection
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String
    orderBy: ChronologicalOrderInput
  ): OrderCollection
  settings: JSON
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
}

"""
A collection of "Accounts"
"""
type AccountCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Account]
}

"""
Account orders filter (INCOMING or OUTGOING)
"""
enum AccountOrdersFilter {
  INCOMING
  OUTGOING
}

input AccountReferenceInput {
  """
  The public id identifying the account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the account (ie: 580)
  """
  legacyId: Int

  """
  The slug identifying the account (ie: babel for https://opencollective.com/babel)
  """
  slug: String
}

"""
All account types
"""
enum AccountType {
  BOT
  COLLECTIVE
  EVENT
  ORGANIZATION
  INDIVIDUAL
}

"""
A financial amount.
"""
type Amount {
  value: Float
  currency: Currency
}

"""
This represents a Bot account
"""
type Bot implements Account {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String
  imageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Get all members (admins, members, backers, followers)
  """
  members(limit: Int = 100, offset: Int = 0, role: [MemberRole], accountType: [AccountType]): MemberCollection
  memberOf(limit: Int, offset: Int, role: [MemberRole], accountType: [AccountType]): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): TransactionCollection
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection
  settings: JSON
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
}

"""
Input to order results chronologically
"""
input ChronologicalOrderInput {
  """
  Field to chronologically order by.
  """
  field: DateTimeField = CREATED_AT

  """
  Ordering direction.
  """
  direction: OrderDirection = DESC
}

"""
Collection interface shared by all collection types
"""
interface Collection {
  offset: Int
  limit: Int
  totalCount: Int
}

"""
This represents a Collective account
"""
type Collective implements Account {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String
  imageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Get all members (admins, members, backers, followers)
  """
  members(limit: Int = 100, offset: Int = 0, role: [MemberRole], accountType: [AccountType]): MemberCollection
  memberOf(limit: Int, offset: Int, role: [MemberRole], accountType: [AccountType]): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): TransactionCollection
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection
  settings: JSON
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location

  """
  Amount of money in cents in the currency of the collective currently available to spend
  """
  balance: Int

  """
  Get the host collective that is receiving the money on behalf of this collective
  """
  host: Account

  """
  Returns whether this collective is approved
  """
  isApproved: Boolean
}

input CollectiveCreateInput {
  name: String!
  slug: String!
  description: String!
  tags: [String]
  githubHandle: String
}

"""
This represents an Comment
"""
type Comment {
  id: String
  createdAt: DateTime
  html: String
  markdown: String
  fromAccount: Account
  account: Account
  fromCollective: Account @deprecated(reason: "2020-02-25: Please use fromAccount")
  collective: Account @deprecated(reason: "2020-02-25: Please use fromAccount")
}

"""
A collection of "Comments"
"""
type CommentCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Comment]
}

input CommentCreateInput {
  markdown: String
  html: String

  """
  If your comment is linked to an expense, set it here
  """
  expense: ExpenseReferenceInput
  ExpenseId: Int
  ConversationId: String
}

input CommentUpdateInput {
  id: String!
  markdown: String
  html: String
}

"""
A conversation thread
"""
type Conversation {
  id: String!
  slug: String!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  tags: [String]
  summary: String!
  collective: Account
  fromCollective: Account

  """
  The root comment / starter for this conversation
  """
  body: Comment

  """
  List the comments for this conversation. Not backed by a loader, don't use this in lists.
  """
  comments(limit: Int, offset: Int): CommentCollection
  followers(limit: Int = 10, offset: Int = 0): AccountCollection
  stats: ConversationStats
}

"""
A collection of "Conversations"
"""
type ConversationCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Conversation]
}

type ConversationStats {
  id: String!

  """
  Total number of comments for this conversation
  """
  commentsCount: Int
}

"""
This represents a Credit transaction
"""
type Credit implements Transaction {
  id: String
  type: TransactionType
  description: String
  amount: Amount
  netAmount: Amount
  platformFee: Amount
  hostFee: Amount
  paymentProcessorFee: Amount
  host: Account
  createdAt: DateTime
  updatedAt: DateTime
  fromAccount: Account
  toAccount: Account
}

"""
All supported currencies
"""
enum Currency {
  """
  US Dollar
  """
  USD

  """
  Euro
  """
  EUR

  """
  Pound Sterling
  """
  GBP

  """
  Mexican Peso
  """
  MXN

  """
  Canadian Dollar
  """
  CAD

  """
  Swiss Franc
  """
  CHF

  """
  Peso Uruguayo
  """
  UYU

  """
  Australian Dollar
  """
  AUD

  """
  Indian Rupee
  """
  INR

  """
  Yen
  """
  JPY

  """
  New Zealand Dollar
  """
  NZD
}

scalar DateString

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
All possible DateTime fields for a resource
"""
enum DateTimeField {
  """
  The creation time of a resource
  """
  CREATED_AT
}

"""
This represents a Debit transaction
"""
type Debit implements Transaction {
  id: String
  type: TransactionType
  description: String
  amount: Amount
  netAmount: Amount
  platformFee: Amount
  hostFee: Amount
  paymentProcessorFee: Amount
  host: Account
  createdAt: DateTime
  updatedAt: DateTime
  fromAccount: Account
  toAccount: Account
}

"""
This represents an Event account
"""
type Event implements Account {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String
  imageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Get all members (admins, members, backers, followers)
  """
  members(limit: Int = 100, offset: Int = 0, role: [MemberRole], accountType: [AccountType]): MemberCollection
  memberOf(limit: Int, offset: Int, role: [MemberRole], accountType: [AccountType]): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): TransactionCollection
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection
  settings: JSON
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location

  """
  Amount of money in cents in the currency of the collective currently available to spend
  """
  balance: Int

  """
  Get the host collective that is receiving the money on behalf of this collective
  """
  host: Account

  """
  Returns whether this collective is approved
  """
  isApproved: Boolean
}

"""
This represents an Expense
"""
type Expense {
  id: String!

  """
  Legacy ID as returned by API V1. Avoid relying on this field as it may be removed in the future.
  """
  legacyId: Int!

  """
  Title/main description for this expense
  """
  description: String!

  """
  Total amount of the expense (sum of the attachments).
  """
  amount: Int!

  """
  Currency that should be used for the payout
  """
  currency: Currency!

  """
  Whether this expense is a receipt or an invoice
  """
  type: ExpenseType!

  """
  The state of the expense (pending, approved, paid, rejected...etc)
  """
  status: ExpenseStatus!
  comments(
    limit: Int
    offset: Int
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: ASC }
  ): CommentCollection!

  """
  The account where the expense was submitted
  """
  account: Account!

  """
  The account being paid by this expense
  """
  payee: Account!

  """
  The account who created this expense
  """
  createdByAccount: Account

  """
  The payout method to use for this expense
  """
  payoutMethod: PayoutMethod
  attachments: [ExpenseAttachment]

  """
  Additional information about the payment. Only visible to user and admins.
  """
  privateMessage: String

  """
  Information to display on the invoice. Only visible to user and admins.
  """
  invoiceInfo: String

  """
  The permissions given to current logged in user for this expense
  """
  permissions: ExpensePermissions!
}

"""
Fields for an expense attachment
"""
type ExpenseAttachment {
  """
  Unique identifier for this expense attachment
  """
  id: String!

  """
  Amount of this attachment
  """
  amount: Int!

  """
  The date on which the attachment was created
  """
  createdAt: DateTime!

  """
  The date on which the attachment was last updated
  """
  updatedAt: DateTime!

  """
  The date on which the expense took place
  """
  incurredAt: DateTime!

  """
  A description for this attachment. Enforced for new items, but old expenses may not have one.
  """
  description: String
  url: String
}

input ExpenseAttachmentCreateInput {
  """
  Amount in cents
  """
  amount: Int!

  """
  What is this attachment about?
  """
  description: String!

  """
  URL of the file linked to this attachment. Must be provided if the expense type is RECEIPT.
  """
  url: String

  """
  When was the money spent?
  """
  incurredAt: DateString
}

input ExpenseCreateInput {
  description: String!
  tags: [String]
  type: ExpenseType!

  """
  A private note that will be attached to your invoice
  """
  privateMessage: String

  """
  Tax ID, VAT number...etc This information will be printed on your invoice.
  """
  invoiceInfo: String

  """
  The payout method that will be used to reimburse the expense
  """
  payoutMethod: PayoutMethodInput!

  """
  The list of attachments for this expense. Total amount will be computed from them.
  """
  attachments: [ExpenseAttachmentCreateInput]!

  """
  Account to reimburse
  """
  payee: AccountReferenceInput!
}

"""
Fields for an expense attachment
"""
type ExpensePermissions {
  """
  Whether the current user can edit the expense
  """
  canEdit: Boolean!

  """
  Whether the current user can edit the expense
  """
  canDelete: Boolean!

  """
  Whether the current user can the the invoice info for this expense
  """
  canSeeInvoiceInfo: Boolean!
}

input ExpenseReferenceInput {
  """
  The public id identifying the expense (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the expense (ie: 580)
  """
  legacyId: Int
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  ERROR
  PAID
}

"""
All supported expense types
"""
enum ExpenseType {
  """
  Invoice: Get paid back for a purchase already made.
  """
  INVOICE

  """
  Receipt: Charge for your time or get paid in advance
  """
  RECEIPT

  """
  Unclassified expense
  """
  UNCLASSIFIED
}

enum ImageFormat {
  txt
  png
  jpg
  gif
  svg
}

"""
This represents an Individual account
"""
type Individual implements Account {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String
  imageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Get all members (admins, members, backers, followers)
  """
  members(limit: Int = 100, offset: Int = 0, role: [MemberRole], accountType: [AccountType]): MemberCollection
  memberOf(limit: Int, offset: Int, role: [MemberRole], accountType: [AccountType]): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): TransactionCollection
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection
  settings: JSON
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  Address. This field is public for hosts, otherwise:
    - Users can see their own address
    - Hosts can see the address of users submitting expenses to their collectives
  """
  location: Location
  firstName: String
  lastName: String
  email: String
  isFollowingConversation(id: String!): Boolean!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
Type for Geographic location
"""
type Location {
  """
  A short name for the location (eg. Open Collective Headquarters)
  """
  name: String

  """
  Postal address without country (eg. 12 opensource avenue, 7500 Paris)
  """
  address: String

  """
  Two letters country code (eg. FR, BE...etc)
  """
  country: String

  """
  Latitude
  """
  lat: Float

  """
  Longitude
  """
  long: Float
}

"""
This represents a Member relationship (ie: Organization backing a Collective)
"""
type Member {
  id: String
  role: MemberRole
  tier: Tier
  createdAt: DateTime
  updatedAt: DateTime
  since: DateTime

  """
  Total amount donated
  """
  totalDonations: Amount
  account: Account
}

"""
A collection of "Members" (ie: Organization backing a Collective)
"""
type MemberCollection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Member]
}

"""
This represents a MemberOf relationship (ie: Collective backed by an Organization)
"""
type MemberOf {
  id: String
  role: MemberRole
  tier: Tier
  createdAt: DateTime
  updatedAt: DateTime
  since: DateTime

  """
  Total amount donated
  """
  totalDonations: Amount
  account: Account
}

"""
A collection of "MemberOf" (ie: Collective backed by an Organization)
"""
type MemberOfCollection {
  totalCount: Int
  nodes: [MemberOf]
}

"""
All member roles
"""
enum MemberRole {
  BACKER
  ADMIN
  CONTRIBUTOR
  HOST
  ATTENDEE
  MEMBER
  FUNDRAISER
  FOLLOWER
}

"""
This is the root mutation
"""
type Mutation {
  editComment(comment: CommentUpdateInput!): Comment
  deleteComment(id: String!): Comment
  createComment(comment: CommentCreateInput!): Comment

  """
  Create a conversation
  """
  createConversation(
    """
    Conversation's title
    """
    title: String!

    """
    The body of the conversation initial comment
    """
    html: String!

    """
    ID of the Collective where the conversation will be created
    """
    CollectiveId: String!

    """
    A list of tags for this conversation
    """
    tags: [String]
  ): Conversation
  editConversation(
    """
    Conversation's id
    """
    id: String!

    """
    Conversation's title
    """
    title: String!

    """
    A list of tags for this conversation
    """
    tags: [String]
  ): Conversation

  """
  Returns true if user is following, false otherwise. Must be authenticated.
  """
  followConversation(
    """
    Conversation's id
    """
    id: String!

    """
    Set this to false to unfollow the conversation
    """
    isActive: Boolean = true
  ): Boolean
  createCollective(
    """
    Information about the collective to create (name, slug, description, tags, ...)
    """
    collective: CollectiveCreateInput!

    """
    Reference to the host to apply on creation.
    """
    host: AccountReferenceInput

    """
    Wether to trigger the automated approval for Open Source collectives with GitHub.
    """
    automateApprovalWithGithub: Boolean = false
  ): Collective

  """
  Submit an expense to a collective
  """
  createExpense(
    """
    Expense data
    """
    expense: ExpenseCreateInput!

    """
    Account where the expense will be created
    """
    account: AccountReferenceInput!
  ): Expense
}

"""
Order model
"""
type Order {
  id: String
  description: String
  amount: Amount
  status: OrderStatus
  frequency: OrderFrequency
  tier: Tier
  fromAccount: Account
  toAccount: Account
  createdAt: DateTime
  updatedAt: DateTime

  """
  UNSUPPORTED: Total amount donated between collectives
  """
  totalDonations: Amount
}

"""
A collection of "Orders"
"""
type OrderCollection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Order]
}

"""
Possible directions in which to order a list of items
"""
enum OrderDirection {
  ASC
  DESC
}

enum OrderFrequency {
  MONTHLY
  YEARLY
  ONETIME
}

"""
All order statuses
"""
enum OrderStatus {
  ACTIVE
  CANCELLED
  PENDING
  PAID
  ERROR
  EXPIRED
}

"""
This represents an Organization account
"""
type Organization implements Account {
  id: String
  legacyId: Int

  """
  The slug identifying the account (ie: babel)
  """
  slug: String
  type: AccountType
  name: String
  description: String
  tags: [String]
  website: String
  twitterHandle: String
  githubHandle: String
  currency: String
  expensePolicy: String
  imageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Get all members (admins, members, backers, followers)
  """
  members(limit: Int = 100, offset: Int = 0, role: [MemberRole], accountType: [AccountType]): MemberCollection
  memberOf(limit: Int, offset: Int, role: [MemberRole], accountType: [AccountType]): MemberOfCollection
  transactions(
    type: TransactionType
    limit: Int = 100
    offset: Int = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): TransactionCollection
  orders(
    limit: Int = 100
    offset: Int = 0
    filter: AccountOrdersFilter
    status: [OrderStatus]
    tierSlug: String
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): OrderCollection
  settings: JSON
  conversations(
    limit: Int
    offset: Int

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int = 30): [TagStat]
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid
  """
  payoutMethods: [PayoutMethod]

  """
  Address. This field is public for hosts, otherwise:
    - Users can see the addresses of the collectives they're admin of
    - Hosts can see the address of organizations submitting expenses to their collectives
  """
  location: Location
  email: String
}

"""
A payout method
"""
type PayoutMethod {
  """
  Unique identifier for this payout method
  """
  id: String!

  """
  The type of this payout method (usually the payment provider)
  """
  type: PayoutMethodType

  """
  A friendly name for users to easily find their payout methods
  """
  name: String

  """
  Whether this payout method has been saved to be used for future payouts
  """
  isSaved: Boolean

  """
  The actual data for this payout method. Content depends on the type.
  """
  data: JSON
}

input PayoutMethodInput {
  id: String
  data: JSON
  name: String
  isSaved: Boolean
  type: PayoutMethodType
}

enum PayoutMethodType {
  OTHER
  PAYPAL
  BANK_ACCOUNT
}

"""
This is the root query
"""
type Query {
  account(
    """
    The public id identifying the account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the account (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the account (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if collective is not found
    """
    throwIfMissing: Boolean = true
  ): Account
  collective(
    """
    The public id identifying the collective (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the collective (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the collective (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if collective is not found
    """
    throwIfMissing: Boolean = true
  ): Collective
  conversation(
    """
    The id identifying the conversation
    """
    id: String!
  ): Conversation
  expense(
    """
    Public expense identifier
    """
    id: String

    """
    Identifiers to retrieve the expense.
    """
    expense: ExpenseReferenceInput
  ): Expense
  loggedInAccount: Account
}

"""
Statistics for a given tag
"""
type TagStat {
  """
  An unique identified for this tag
  """
  id: String!

  """
  Name/Label of the tag
  """
  tag: String!

  """
  Number of entries for this tag
  """
  count: Int!
}

"""
Tier model
"""
type Tier {
  id: String
  slug: String
  name: String
  description: String

  """
  Get all orders
  """
  orders(limit: Int = 100, offset: Int = 0, status: [OrderStatus]): OrderCollection
}

"""
Transaction interface shared by all kind of transactions (Debit, Credit)
"""
interface Transaction {
  id: String
  type: TransactionType
  description: String
  amount: Amount
  netAmount: Amount
  platformFee: Amount
  hostFee: Amount
  paymentProcessorFee: Amount
  host: Account
  fromAccount: Account
  toAccount: Account
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A collection of Transactions (Debit or Credit)
"""
type TransactionCollection {
  totalCount: Int
  nodes: [Transaction]
}

"""
All transaction types
"""
enum TransactionType {
  DEBIT
  CREDIT
}

"""
TransferWise related properties for bank transfer.
"""
type TransferWise {
  requiredFields(
    """
    The 3 letter code identifying the currency you want to receive (ie: USD, EUR, BRL, GBP)
    """
    currency: TransferWiseCurrency!
  ): [TransferWiseRequiredField]
  availableCurrencies: [TransferWiseCurrency]
}

"""
All currencies supported by TransferWise
"""
enum TransferWiseCurrency {
  """
  Euro
  """
  EUR

  """
  Pound Sterling
  """
  GBP

  """
  Indian Rupee
  """
  INR

  """
  US Dollar
  """
  USD

  """
  UAE Dirham
  """
  AED

  """
  Argentine Peso
  """
  ARS

  """
  Australian Dollar
  """
  AUD

  """
  Taka
  """
  BDT

  """
  Bulgarian Lev
  """
  BGN

  """
  Brazilian Real
  """
  BRL

  """
  Pula
  """
  BWP

  """
  Canadian Dollar
  """
  CAD

  """
  Swiss Franc
  """
  CHF

  """
  Chilean Peso
  """
  CLP

  """
  Yuan Renminbi
  """
  CNY

  """
  Costa Rican Colon
  """
  CRC

  """
  Czech Koruna
  """
  CZK

  """
  Danish Krone
  """
  DKK

  """
  Egyptian Pound
  """
  EGP

  """
  Lari
  """
  GEL

  """
  Ghana Cedi
  """
  GHS

  """
  Hong Kong Dollar
  """
  HKD

  """
  Kuna
  """
  HRK

  """
  Forint
  """
  HUF

  """
  Rupiah
  """
  IDR

  """
  New Israeli Sheqel
  """
  ILS

  """
  Yen
  """
  JPY

  """
  Kenyan Shilling
  """
  KES

  """
  Won
  """
  KRW

  """
  Sri Lanka Rupee
  """
  LKR

  """
  Moroccan Dirham
  """
  MAD

  """
  Mexican Peso
  """
  MXN

  """
  Malaysian Ringgit
  """
  MYR

  """
  Naira
  """
  NGN

  """
  Norwegian Krone
  """
  NOK

  """
  Nepalese Rupee
  """
  NPR

  """
  New Zealand Dollar
  """
  NZD

  """
  Nuevo Sol
  """
  PEN

  """
  Philippine Peso
  """
  PHP

  """
  Pakistan Rupee
  """
  PKR

  """
  Zloty
  """
  PLN

  """
  Romanian Leu
  """
  RON

  """
  Russian Ruble
  """
  RUB

  """
  Swedish Krona
  """
  SEK

  """
  Singapore Dollar
  """
  SGD

  """
  Baht
  """
  THB

  """
  Turkish Lira
  """
  TRY

  """
  Tanzanian Shilling
  """
  TZS

  """
  Hryvnia
  """
  UAH

  """
  Uganda Shilling
  """
  UGX

  """
  Peso Uruguayo
  """
  UYU

  """
  Dong
  """
  VND

  """
  CFA Franc BCEAO
  """
  XOF

  """
  Rand
  """
  ZAR

  """
  Zambian Kwacha
  """
  ZMW
}

type TransferWiseField {
  name: String
  group: [TransferWiseFieldGroup]
}

type TransferWiseFieldGroup {
  key: String
  name: String
  type: String
  required: Boolean
  displayFormat: String
  example: String
  minLength: Int
  maxLength: Int
  validationRegexp: String
  validationAsync: String
  valuesAllowed: [TransferWiseFieldVatvkluesAllowed]
}

type TransferWiseFieldVatvkluesAllowed {
  key: String
  name: String
}

type TransferWiseRequiredField {
  type: String
  title: String
  fields: [TransferWiseField]
}
